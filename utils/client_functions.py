import asyncio
import logging
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.client_db import update_user_status_by_action
from utils.video_cache import send_video_with_caching
from keyboards.client_keyboards import create_channel_keyboard, create_inline_only_keyboard
from database.settings_db import get_answers_config, get_private_lesson_config, get_tariffs_config, get_clothes_tariff_config, get_tech_tariff_config, get_clothes_payment_config, get_tech_payment_config

async def check_user_subscription(bot, user_id: int, channel_id: str) -> bool:
    try:
        if channel_id.startswith('@'):
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        else:
            chat_member = await bot.get_chat_member(chat_id=int(channel_id), user_id=user_id)
        
        return chat_member.status not in ['left', 'kicked']
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False


async def send_welcome_without_subscription(message: types.Message, welcome_config):
    try:
        message_text = welcome_config["message_text"]
        media_type = welcome_config["media_type"]
        media_url = welcome_config["media_url"]
        
        channel_keyboard = create_channel_keyboard(welcome_config["channel_url"], welcome_config.get("channel_button_text", "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"))
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=channel_keyboard
                    )
                else:
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=channel_keyboard
                    )
            elif media_type == "video":
                if media_url.startswith(('http://', 'https://')):
                    cache_key = "welcome_without_subscription_video"
                    success = await send_video_with_caching(
                        message, 
                        media_url, 
                        message_text, 
                        channel_keyboard, 
                        cache_key
                    )
                else:
                    await message.answer_video(
                        video=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=channel_keyboard
                    )
        else:
            await message.answer(
                message_text,
                parse_mode="HTML",
                reply_markup=channel_keyboard
            )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
            reply_markup=channel_keyboard
        )



async def send_answers_message_with_sequence(message: types.Message):
    try:
        config = get_answers_config()
        
        message_text = config["message"]
        media_type = config["media_type"]
        media_url = config["media_url"]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéì –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —É—Ä–æ–∫", callback_data="private_lesson_sequence")]
        ])
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    # –¶–µ file_id
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            elif media_type == "video":
                cache_key = "answers_video_sequence"
                success = await send_video_with_caching(
                    message, 
                    media_url, 
                    message_text, 
                    keyboard, 
                    cache_key
                )
        else:
            await message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã': {e}")


async def send_private_lesson_message_with_sequence(message: types.Message):
    try:
        config = get_private_lesson_config()
        update_user_status_by_action(message.from_user.id, "private_lesson_viewed")
        
        message_text = config["message"]
        media_type = config["media_type"]
        media_url = config["media_url"]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="tariffs_sequence")]
        ])
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ file_id –∞–±–æ URL
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    # –¶–µ file_id
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            elif media_type == "video":
                cache_key = "private_lesson_video_sequence"
                success = await send_video_with_caching(
                    message, 
                    media_url, 
                    message_text, 
                    keyboard, 
                    cache_key
                )
        else:
            await message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —É—Ä–æ–∫' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —É—Ä–æ–∫': {e}")


async def send_tariffs_message_with_sequence(message: types.Message):
    try:
        from database.settings_db import get_tariffs_config, get_clothes_tariff_config, get_tech_tariff_config
        config = get_tariffs_config()
        clothes_config = get_clothes_tariff_config()
        tech_config = get_tech_tariff_config()
        
        message_text = config["message"]
        media_type = config["media_type"]
        media_url = config["media_url"]
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ –∫–Ω–æ–ø–æ–∫ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        clothes_button_text = clothes_config.get("button_text", "üëó –û–¥–µ–∂–¥–∞")
        tech_button_text = tech_config.get("button_text", "üîß –¢–µ—Ö–Ω–∏–∫–∞")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=clothes_button_text, callback_data="clothes")],
            [InlineKeyboardButton(text=tech_button_text, callback_data="tech")]
        ])
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    # –¶–µ file_id
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            elif media_type == "video":
                cache_key = "tariffs_video_sequence"
                success = await send_video_with_caching(
                    message, 
                    media_url, 
                    message_text, 
                    keyboard, 
                    cache_key
                )
        else:
            await message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        
        await update_user_status_by_action(message.from_user.id, "tariffs_viewed")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã': {e}")


async def send_clothes_tariff_message(message: types.Message):
    try:
        config = get_clothes_tariff_config()
        
        update_user_status_by_action(message.from_user.id, "clothes_tariff_viewed")
        
        message_text = config.get("message", "üëó <b>–¢–∞—Ä–∏—Ñ '–û–¥–µ–∂–¥–∞'</b>\n\n–û–ø–∏—Å —Ç–∞—Ä–∏—Ñ—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–¥—è–≥—É...")
        media_type = config.get("media_type", "none")
        media_url = config.get("media_url", "")
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=config.get("button_text", "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ"), callback_data="pay_clothes")]
        ])
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ file_id –∞–±–æ URL
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    # –¶–µ file_id
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            elif media_type == "video":
                cache_key = "clothes_tariff_video"
                success = await send_video_with_caching(
                    message, 
                    media_url, 
                    message_text, 
                    keyboard, 
                    cache_key
                )
        else:
            await message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞—Ä–∏—Ñ—É '–û–¥–µ–∂–¥–∞' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–∞—Ä–∏—Ñ—É '–û–¥–µ–∂–¥–∞': {e}")


async def send_tech_tariff_message(message: types.Message):
    try:
        config = get_tech_tariff_config()
        
        update_user_status_by_action(message.from_user.id, "tech_tariff_viewed")
        
        message_text = config.get("message", "üîß <b>–¢–∞—Ä–∏—Ñ '–¢–µ—Ö–Ω–∏–∫–∞'</b>\n\n–û–ø–∏—Å —Ç–∞—Ä–∏—Ñ—É –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...")
        media_type = config.get("media_type", "none")
        media_url = config.get("media_url", "")
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=config.get("button_text", "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ"), callback_data="pay_tech")]
        ])
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            elif media_type == "video":
                cache_key = "tech_tariff_video"
                success = await send_video_with_caching(
                    message, 
                    media_url, 
                    message_text, 
                    keyboard, 
                    cache_key
                )
        else:
            await message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞—Ä–∏—Ñ—É '–¢–µ—Ö–Ω–∏–∫–∞' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–∞—Ä–∏—Ñ—É '–¢–µ—Ö–Ω–∏–∫–∞': {e}")


async def send_clothes_payment_message(message: types.Message):
    try:
        config = get_clothes_payment_config()
        
        update_user_status_by_action(message.from_user.id, "clothes_payment_clicked")
        
        message_text = config.get("message", "üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ—É '–û–¥–µ–∂–¥–∞'</b>\n\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É...")
        media_type = config.get("media_type", "none")
        media_url = config.get("media_url", "")

        keyboard_buttons = []
        
        if config.get("show_back_button", True):
            keyboard_buttons.append([InlineKeyboardButton(text=config.get("back_button_text", "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), callback_data="clothes")])
        
        if config.get("show_main_menu_button", True):
            keyboard_buttons.append([InlineKeyboardButton(text=config.get("main_menu_button_text", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), callback_data="back_to_start")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            elif media_type == "video":
                cache_key = "clothes_payment_video"
                success = await send_video_with_caching(
                    message, 
                    media_url, 
                    message_text, 
                    keyboard, 
                    cache_key
                )
        else:
            await message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—É '–û–¥–µ–∂–¥–∞' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ–ø–ª–∞—Ç–∏ '–û–¥–µ–∂–¥–∞': {e}")


async def send_tech_payment_message(message: types.Message):
    try:
        config = get_tech_payment_config()
        
        update_user_status_by_action(message.from_user.id, "tech_payment_clicked")
        
        message_text = config.get("message", "üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ—É '–¢–µ—Ö–Ω–∏–∫–∞'</b>\n\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É...")
        media_type = config.get("media_type", "none")
        media_url = config.get("media_url", "")
        
        keyboard_buttons = []
        
        if config.get("show_back_button", True):
            keyboard_buttons.append([InlineKeyboardButton(text=config.get("back_button_text", "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), callback_data="tech")])
        
        if config.get("show_main_menu_button", True):
            keyboard_buttons.append([InlineKeyboardButton(text=config.get("main_menu_button_text", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), callback_data="back_to_start")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
        
        if media_type != "none" and media_url:
            if media_type == "photo":
                if media_url.startswith(('http://', 'https://')):
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await message.answer_photo(
                        photo=media_url,
                        caption=message_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            elif media_type == "video":
                cache_key = "tech_payment_video"
                success = await send_video_with_caching(
                    message, 
                    media_url, 
                    message_text, 
                    keyboard, 
                    cache_key
                )
        else:
            await message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—É '–¢–µ—Ö–Ω–∏–∫–∞' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ–ø–ª–∞—Ç–∏ '–¢–µ—Ö–Ω–∏–∫–∞': {e}")

