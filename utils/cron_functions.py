import asyncio
import json
from aiogram import Bot
from database.settings_db import get_mailing_by_id, update_mailing_users_count
from database.client_db import get_all_users, get_users_by_status
from keyboards.client_keyboards import create_custom_keyboard
from utils.video_cache import send_video_with_caching_for_mailing


def get_filtered_users(mailing):
    """–û—Ç—Ä–∏–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user_filter = mailing.get("user_filter", "all")
    
    if user_filter == "all":
        return get_all_users()
    elif user_filter == "status":
        user_status = mailing.get("user_status", "")
        if user_status:
            statuses = user_status.split(',')
            users = []
            for status in statuses:
                status_users = get_users_by_status(status.strip())
                users.extend(status_users)
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            unique_users = []
            seen_ids = set()
            for user in users:
                if user[0] not in seen_ids:  # user[0] - —Ü–µ Telegram ID
                    unique_users.append(user)
                    seen_ids.add(user[0])
            return unique_users
        return get_all_users()
    
    return get_all_users()



async def send_mailing_to_users(bot: Bot, mailing_id: int) -> bool:
    try:
        mailing = get_mailing_by_id(mailing_id)
        if not mailing:
            print(f"Mailing with ID {mailing_id} not found")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        users = get_filtered_users(mailing)
        if not users:
            print("‚ùå No users found after filtering")
            return False
        
        print(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
        if users:
            print(f"üîç –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {users[0]}")
            print(f"üîç user[0] (Telegram ID): {users[0][0]}")
            print(f"üîç user[1] (username): {users[0][1]}")
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ ID
        valid_users = []
        for user in users:
            if user and len(user) > 0 and user[0] is not None:
                valid_users.append(user)
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {user}")
        
        if not valid_users:
            print("‚ùå No valid users found after ID validation")
            return False
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(valid_users)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
        
        keyboard = None
        
        if mailing.get("inline_buttons"):  # inline_buttons
            try:
                buttons_data = json.loads(mailing["inline_buttons"])
                keyboard = create_custom_keyboard(buttons_data)
            except json.JSONDecodeError as e:
                keyboard = None
        
        success_count = 0
        error_count = 0
        
        for user in valid_users:
            user_id = user[0]  # user_id - —Ü–µ Telegram ID, –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–æ–∑–∏—Ü—ñ—ó [0]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º ID
            if not user_id or user_id is None:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º ID: {user}")
                error_count += 1
                continue
            
            try:
                if mailing.get("media_type") == "photo" and mailing.get("media_url"):
                    media_url = mailing["media_url"].strip()
                    if not media_url:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ç–æ –±–µ–∑ URL/file_id –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                        error_count += 1
                        continue
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ file_id –∞–±–æ URL
                    if media_url.startswith(('http://', 'https://')):
                        # –¶–µ URL - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=media_url,
                            caption=mailing["message_text"],
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                        print(f"‚úÖ –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –ø–æ URL")
                    else:
                        # –¶–µ file_id - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ file_id
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=media_url,
                            caption=mailing["message_text"],
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                        print(f"‚úÖ –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –ø–æ file_id")
                        
                elif mailing.get("media_type") == "video" and mailing.get("media_url"):
                    media_url = mailing["media_url"].strip()
                    if not media_url:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–µ–æ –±–µ–∑ URL/file_id –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                        error_count += 1
                        continue
                    
                    cache_key = f"mailing_video_{mailing_id}"
                    success = await send_video_with_caching_for_mailing(
                        bot,
                        user_id,
                        media_url,  # media_url –∞–±–æ file_id
                        mailing["message_text"],
                        keyboard,
                        cache_key
                    )
                    
                    if not success:
                        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                        error_count += 1
                        continue
                    else:
                        print(f"‚úÖ –í—ñ–¥–µ–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                        
                else:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ–¥—ñ–∞
                    await bot.send_message(
                        chat_id=user_id,
                        text=mailing["message_text"],
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    print(f"‚úÖ –¢–µ–∫—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                
                success_count += 1
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
                error_count += 1
                continue
        
        update_mailing_users_count(mailing_id, success_count)
        
        if success_count > 0 and mailing.get("is_recurring"):
            from database.settings_db import schedule_next_recurring
            try:
                next_scheduled = schedule_next_recurring(mailing_id)
                if next_scheduled:
                    print(f"‚úÖ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ {mailing_id} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ {mailing_id}: {e}")
        elif success_count > 0:
            print(f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ {mailing_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ {mailing_id}:")
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∏: {error_count}")
        print(f"   üìä –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(valid_users)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –†–æ–∑—Å–∏–ª–∫–∞ {mailing_id}: {e}")
        return False


async def process_pending_mailings(bot: Bot) -> None:
    from database.settings_db import get_scheduled_mailings, update_mailing_status, schedule_next_recurring
    from datetime import datetime
    import pytz
    
    try:
        kyiv_tz = pytz.timezone('Europe/Kiev')
        current_time = datetime.now(kyiv_tz)
        
        scheduled_mailings = get_scheduled_mailings()
        print(f"üìÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(scheduled_mailings)} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫")
        
        for mailing in scheduled_mailings:
            mailing_id = mailing[0]
            scheduled_at_str = mailing[10]
            is_recurring = mailing[13] if len(mailing) > 13 else False
            next_scheduled_str = mailing[17] if len(mailing) > 17 else None
            
            print(f"üìã –†–æ–∑—Å–∏–ª–∫–∞ {mailing_id}: scheduled_at={scheduled_at_str}, is_recurring={is_recurring}, next_scheduled={next_scheduled_str}")
            
            if is_recurring and next_scheduled_str:
                try:
                    if 'T' in next_scheduled_str:
                        next_scheduled = datetime.fromisoformat(next_scheduled_str.replace('Z', '+00:00'))
                        next_scheduled = pytz.utc.localize(next_scheduled).astimezone(kyiv_tz)
                    else:
                        next_scheduled = datetime.strptime(next_scheduled_str, '%Y-%m-%d %H:%M:%S')
                        next_scheduled = kyiv_tz.localize(next_scheduled)
                    
                    if current_time >= next_scheduled:
                        print(f"üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É {mailing_id}")
                        success = await send_mailing_to_users(bot, mailing_id)
                        
                        if success:
                            update_mailing_status(mailing_id, 'sent')
                            print(f"‚úÖ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ {mailing_id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞")
                            
                            try:
                                next_scheduled = schedule_next_recurring(mailing_id)
                                if next_scheduled:
                                    print(f"‚úÖ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ {mailing_id} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                            except Exception as e:
                                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ {mailing_id}: {e}")
                        else:
                            update_mailing_status(mailing_id, 'failed')
                            print(f"‚ùå –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ {mailing_id} –Ω–µ –≤–¥–∞–ª–∞—Å—è")
                    
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ {mailing_id}: {e}")
                    continue
            
            elif scheduled_at_str:
                try:
                    if 'T' in scheduled_at_str:
                        scheduled_at = datetime.fromisoformat(scheduled_at_str.replace('Z', '+00:00'))
                        scheduled_at = pytz.utc.localize(scheduled_at).astimezone(kyiv_tz)
                    else:
                        scheduled_at = datetime.strptime(scheduled_at_str, '%Y-%m-%d %H:%M:%S')
                        scheduled_at = kyiv_tz.localize(scheduled_at)
                    
                    if current_time >= scheduled_at:
                        print(f"üìÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É {mailing_id}")
                        success = await send_mailing_to_users(bot, mailing_id)
                        
                        if success:
                            update_mailing_status(mailing_id, 'sent')
                            print(f"‚úÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ {mailing_id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        else:
                            update_mailing_status(mailing_id, 'failed')
                            print(f"‚ùå –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ {mailing_id} –Ω–µ –≤–¥–∞–ª–∞—Å—è")
                    
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–≤–∏—á–∞–π–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ {mailing_id}: {e}")
                    continue
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫: {e}")


async def check_and_send_scheduled_mailings(bot: Bot) -> None:
    await process_pending_mailings(bot)
