import asyncio
import logging
import json
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Set
import aiohttp
from contextlib import asynccontextmanager
import numpy as np
from dataclasses import dataclass, asdict
import time
from collections import defaultdict

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramAPIError

# ================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ================================
BOT_TOKEN = '8171832195:AAFYygMxoM5Rc9UMSHMswC63HEUnpsPMfgI'
CHAT_ID = '-1002254847974'   # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π chat ID
BINANCE_API_URL = "https://api.binance.com/api/v3"
CHECK_INTERVAL = 30  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è
TIMEFRAMES = ['1h', '4h']
TOP_SYMBOLS_COUNT = 100  # –¢–æ–ø-100 –º–æ–Ω–µ—Ç
APPROACH_TICKS = 5  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—ñ–∫—ñ–≤ –¥–ª—è "–Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è"

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ================================
# ENHANCED DATA STRUCTURES
# ================================
@dataclass
class EnhancedOrderBlock:
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Order Block –∑ Volumized –∞–Ω–∞–ª—ñ–∑–æ–º"""
    id: str
    symbol: str
    timeframe: str
    high_price: float
    low_price: float
    volume: float
    quote_volume: float  # –î–æ–¥–∞–Ω–æ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    timestamp: int
    block_type: str  # 'bullish' –∞–±–æ 'bearish'
    is_active: bool = True
    strength: float = 0.0  # –°–∏–ª–∞ –±–ª–æ–∫—É (0-100)
    volume_profile: List[float] = None  # –ü—Ä–æ—Ñ—ñ–ª—å –æ–±'—î–º—É –≤ –∑–æ–Ω—ñ
    flux_score: float = 0.0  # –û—Ü—ñ–Ω–∫–∞ Flux
    institutional_level: float = 0.0  # –†—ñ–≤–µ–Ω—å institutional activity
    approach_alerts_sent: Set[float] = None  # –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –∞–ª–µ—Ä—Ç—ñ–≤
    
    def __post_init__(self):
        if self.volume_profile is None:
            self.volume_profile = []
        if self.approach_alerts_sent is None:
            self.approach_alerts_sent = set()

@dataclass
class FluxData:
    """–†–æ–∑—à–∏—Ä–µ–Ω—ñ –¥–∞–Ω—ñ Flux Charts"""
    symbol: str
    timeframe: str
    buy_flow: float
    sell_flow: float
    net_flow: float
    flow_strength: float
    institutional_flow: float  # –ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    retail_flow: float  # –ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    flux_momentum: float  # Momentum –ø–æ—Ç–æ–∫—É
    timestamp: int

@dataclass
class PriceApproach:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –∑–æ–Ω–∏"""
    symbol: str
    current_price: float
    target_zone: Tuple[float, float]  # (low, high)
    distance_ticks: int
    approach_speed: str  # 'slow', 'medium', 'fast'
    probability: float  # –í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–æ–Ω–∏

# ================================
# TOP SYMBOLS FETCHER
# ================================
class BinanceSymbolFetcher:
    def __init__(self):
        self.session = None
        self.top_symbols_cache = []
        self.cache_timestamp = 0
        self.cache_duration = 3600  # 1 –≥–æ–¥–∏–Ω–∞ –∫–µ—à
    
    async def init_session(self):
        if not self.session:
            self.session = aiohttp.ClientSession()
    
    async def close_session(self):
        if self.session:
            await self.session.close()
    
    async def get_top_symbols(self, limit: int = TOP_SYMBOLS_COUNT) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Å–∏–º–≤–æ–ª—ñ–≤ –∑–∞ –æ–±'—î–º–æ–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
        current_time = time.time()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        if (current_time - self.cache_timestamp) < self.cache_duration and self.top_symbols_cache:
            return self.top_symbols_cache[:limit]
        
        await self.init_session()
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ 24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å—ñ–º –ø–∞—Ä–∞–º USDT
            url = f"{BINANCE_API_URL}/ticker/24hr"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±'—î–º–æ–º
                    usdt_pairs = [
                        item for item in data 
                        if item['symbol'].endswith('USDT') and 
                        float(item['quoteVolume']) > 1000000  # –ú—ñ–Ω –æ–±'—î–º $1M
                    ]
                    
                    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±'—î–º–æ–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ (quote volume)
                    sorted_pairs = sorted(
                        usdt_pairs, 
                        key=lambda x: float(x['quoteVolume']), 
                        reverse=True
                    )
                    
                    # –í–∏—Ç—è–≥—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –±–µ–∑ USDT
                    symbols = [pair['symbol'][:-4] for pair in sorted_pairs[:limit]]
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    self.top_symbols_cache = symbols
                    self.cache_timestamp = current_time
                    
                    logger.info(f"üìä –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ø-{limit} —Å–∏–º–≤–æ–ª—ñ–≤. –ü–µ—Ä—à—ñ 10: {symbols[:10]}")
                    return symbols
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Å–∏–º–≤–æ–ª—ñ–≤: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ API
            if self.top_symbols_cache:
                return self.top_symbols_cache[:limit]
            else:
                return ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'MATIC', 'DOT', 'LINK', 'AVAX', 'UNI']

# ================================
# ENHANCED TECHNICAL ANALYZER
# ================================
class EnhancedTechnicalAnalyzer:
    def __init__(self):
        self.session = None
        self.symbol_fetcher = BinanceSymbolFetcher()
    
    async def init_session(self):
        if not self.session:
            self.session = aiohttp.ClientSession()
            await self.symbol_fetcher.init_session()
    
    async def close_session(self):
        if self.session:
            await self.session.close()
        await self.symbol_fetcher.close_session()
    
    async def get_kline_data(self, symbol: str, timeframe: str, limit: int = 500) -> Optional[List[Dict]]:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–≤—ñ—á–æ–∫"""
        await self.init_session()
        
        tf_map = {'1h': '1h', '4h': '4h', '1d': '1d'}
        interval = tf_map.get(timeframe, '1h')
        
        url = f"{BINANCE_API_URL}/klines"
        params = {
            'symbol': symbol.upper() + 'USDT',
            'interval': interval,
            'limit': limit
        }
        
        try:
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return [
                        {
                            'timestamp': int(item[0]),
                            'open': float(item[1]),
                            'high': float(item[2]),
                            'low': float(item[3]),
                            'close': float(item[4]),
                            'volume': float(item[5]),
                            'close_time': int(item[6]),
                            'quote_volume': float(item[7]),
                            'trades_count': int(item[8]),
                            'buy_volume': float(item[9]),
                            'buy_quote_volume': float(item[10])
                        }
                        for item in data
                    ]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None
    
    def identify_volumized_order_blocks(self, kline_data: List[Dict], symbol: str, timeframe: str) -> List[EnhancedOrderBlock]:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è Volumized Order Blocks"""
        if len(kline_data) < 50:
            return []
        
        order_blocks = []
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–æ—Ä–æ–≥–∏
        volume_data = [k['volume'] for k in kline_data]
        quote_volume_data = [k['quote_volume'] for k in kline_data]
        
        volume_threshold = np.percentile(volume_data, 80)  # –¢–æ–ø 20% –∑–∞ –æ–±'—î–º–æ–º
        quote_volume_threshold = np.percentile(quote_volume_data, 80)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ institutional activity –ø–æ—Ä–æ–≥—É
        institutional_threshold = self._calculate_institutional_threshold(kline_data)
        
        # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è Order Blocks
        for i in range(10, len(kline_data) - 10):
            current = kline_data[i]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏—Å–æ–∫–∏–π –æ–±'—î–º —Ç–∞ institutional activity
            if (current['volume'] > volume_threshold and 
                current['quote_volume'] > quote_volume_threshold):
                
                # –ê–Ω–∞–ª—ñ–∑ –æ—Ç–æ—á—É—é—á–∏—Ö —Å–≤—ñ—á–æ–∫
                left_context = kline_data[i-10:i]
                right_context = kline_data[i+1:i+11]
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ Order Block
                if self._is_valid_order_block_zone(current, left_context, right_context):
                    
                    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –±–ª–æ–∫—É
                    block_type = self._determine_enhanced_block_type(current, left_context, right_context)
                    
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
                    strength = self._calculate_enhanced_strength(current, left_context, right_context, volume_threshold)
                    flux_score = self._calculate_flux_score(current, left_context, right_context)
                    institutional_level = self._calculate_institutional_level(current, institutional_threshold)
                    
                    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ Order Block
                    block_id = f"{symbol}_{timeframe}_{current['timestamp']}_{block_type}"
                    
                    enhanced_block = EnhancedOrderBlock(
                        id=block_id,
                        symbol=symbol,
                        timeframe=timeframe,
                        high_price=current['high'],
                        low_price=current['low'],
                        volume=current['volume'],
                        quote_volume=current['quote_volume'],
                        timestamp=current['timestamp'],
                        block_type=block_type,
                        strength=strength,
                        flux_score=flux_score,
                        institutional_level=institutional_level
                    )
                    
                    # –î–æ–¥–∞—î–º–æ Volume Profile
                    enhanced_block.volume_profile = self._build_volume_profile(current, left_context, right_context)
                    
                    order_blocks.append(enhanced_block)
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ –±–ª–æ–∫–∏
        strong_blocks = [block for block in order_blocks if block.strength > 40 and block.flux_score > 30]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–∏–ª–æ—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–ø-20
        return sorted(strong_blocks, key=lambda x: x.strength + x.flux_score, reverse=True)[:20]
    
    def _calculate_institutional_threshold(self, kline_data: List[Dict]) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ä–æ–≥—É –¥–ª—è institutional activity"""
        # –ê–Ω–∞–ª—ñ–∑ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è buy/sell volume
        buy_ratios = []
        for candle in kline_data:
            if candle['volume'] > 0:
                buy_ratio = candle['buy_volume'] / candle['volume']
                buy_ratios.append(buy_ratio)
        
        # –ü–æ—Ä–æ–≥–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å institutional activity
        return np.percentile(buy_ratios, 85) if buy_ratios else 0.6
    
    def _is_valid_order_block_zone(self, current: Dict, left_context: List[Dict], right_context: List[Dict]) -> bool:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ Order Block –∑–æ–Ω–∏"""
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º
        left_consolidation = self._check_consolidation_pattern(left_context)
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø—É–ª—å—Å—É –ø—ñ—Å–ª—è –±–ª–æ–∫—É
        right_impulse = self._check_impulse_pattern(right_context)
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ volume spike
        volume_spike = self._check_volume_spike(current, left_context)
        
        # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ institutional footprint
        institutional_footprint = self._check_institutional_footprint(current)
        
        return left_consolidation and right_impulse and volume_spike and institutional_footprint
    
    def _check_consolidation_pattern(self, candles: List[Dict]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—É –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—ó"""
        if len(candles) < 5:
            return False
        
        highs = [c['high'] for c in candles[-5:]]
        lows = [c['low'] for c in candles[-5:]]
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        price_range = (max(highs) - min(lows)) / np.mean([max(highs), min(lows)])
        
        # –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è —è–∫—â–æ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å –º–µ–Ω—à–µ 3%
        return price_range < 0.03
    
    def _check_impulse_pattern(self, candles: List[Dict]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø—É–ª—å—Å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        if len(candles) < 3:
            return False
        
        first_close = candles[0]['close']
        last_close = candles[-1]['close']
        
        # –Ü–º–ø—É–ª—å—Å —è–∫—â–æ –∑–º—ñ–Ω–∞ –±—ñ–ª—å—à–µ 2% –∑–∞ 3 —Å–≤—ñ—á–∫–∏
        price_change = abs(last_close - first_close) / first_close
        return price_change > 0.02
    
    def _check_volume_spike(self, current: Dict, left_context: List[Dict]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ volume spike"""
        if len(left_context) < 5:
            return False
        
        avg_volume = np.mean([c['volume'] for c in left_context[-5:]])
        return current['volume'] > (avg_volume * 2)  # –û–±'—î–º —É 2 —Ä–∞–∑–∏ –±—ñ–ª—å—à–∏–π
    
    def _check_institutional_footprint(self, current: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ institutional footprint"""
        if current['volume'] == 0:
            return False
        
        # –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è buy/total volume
        buy_ratio = current['buy_volume'] / current['volume']
        
        # Institutional activity —è–∫—â–æ strong bias –≤ –æ–¥–∏–Ω –±—ñ–∫
        return buy_ratio > 0.7 or buy_ratio < 0.3
    
    def _determine_enhanced_block_type(self, current: Dict, left_context: List[Dict], right_context: List[Dict]) -> str:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –±–ª–æ–∫—É"""
        # –ê–Ω–∞–ª—ñ–∑ buy/sell pressure
        buy_ratio = current['buy_volume'] / current['volume'] if current['volume'] > 0 else 0.5
        
        # –ê–Ω–∞–ª—ñ–∑ —Ä—É—Ö—É –ø—ñ—Å–ª—è –±–ª–æ–∫—É
        future_move = right_context[-1]['close'] - current['close']
        
        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        if buy_ratio > 0.6 and future_move > 0:
            return 'bullish'
        elif buy_ratio < 0.4 and future_move < 0:
            return 'bearish'
        elif future_move > 0:
            return 'bullish'
        else:
            return 'bearish'
    
    def _calculate_enhanced_strength(self, current: Dict, left_context: List[Dict], right_context: List[Dict], volume_threshold: float) -> float:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª–∏ –±–ª–æ–∫—É"""
        strength = 0
        
        # Volume component (0-30)
        volume_ratio = current['volume'] / volume_threshold
        strength += min(30, volume_ratio * 15)
        
        # Quote volume component (0-25)
        avg_quote_volume = np.mean([c['quote_volume'] for c in left_context])
        if avg_quote_volume > 0:
            quote_ratio = current['quote_volume'] / avg_quote_volume
            strength += min(25, quote_ratio * 10)
        
        # Price action component (0-25)
        price_impact = abs(right_context[-1]['close'] - current['close']) / current['close']
        strength += min(25, price_impact * 500)
        
        # Institutional component (0-20)
        buy_ratio = current['buy_volume'] / current['volume'] if current['volume'] > 0 else 0.5
        institutional_score = abs(buy_ratio - 0.5) * 2  # Distance from 50%
        strength += institutional_score * 20
        
        return min(100, strength)
    
    def _calculate_flux_score(self, current: Dict, left_context: List[Dict], right_context: List[Dict]) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Flux –æ—Ü—ñ–Ω–∫–∏"""
        if not left_context or not right_context:
            return 0
        
        # –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω–∏ –ø–æ—Ç–æ–∫—ñ–≤
        before_flow = np.mean([c['buy_volume'] - (c['volume'] - c['buy_volume']) for c in left_context[-3:]])
        after_flow = np.mean([c['buy_volume'] - (c['volume'] - c['buy_volume']) for c in right_context[:3]])
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–º—ñ–Ω–∏ flux
        total_volume = current['volume'] + np.mean([c['volume'] for c in left_context[-3:]])
        if total_volume > 0:
            flux_change = abs(after_flow - before_flow) / total_volume
            return min(100, flux_change * 1000)
        
        return 0
    
    def _calculate_institutional_level(self, current: Dict, institutional_threshold: float) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è institutional activity"""
        if current['volume'] == 0:
            return 0
        
        buy_ratio = current['buy_volume'] / current['volume']
        
        # –û—Ü—ñ–Ω–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥ –∑–≤–∏—á–∞–π–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        institutional_deviation = abs(buy_ratio - 0.5) / 0.5
        
        # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–æ 0-100
        return min(100, institutional_deviation * 100)
    
    def _build_volume_profile(self, current: Dict, left_context: List[Dict], right_context: List[Dict]) -> List[float]:
        """–ü–æ–±—É–¥–æ–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é –æ–±'—î–º—É"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π volume profile –Ω–∞ –æ—Å–Ω–æ–≤—ñ OHLC —Ç–∞ volume
        all_candles = left_context + [current] + right_context
        
        volume_profile = []
        for candle in all_candles[-10:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10 —Å–≤—ñ—á–æ–∫
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –æ–±'—î–º –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É —Ü—ñ–Ω–∏
            price_range = candle['high'] - candle['low']
            if price_range > 0:
                volume_density = candle['volume'] / price_range
                volume_profile.append(volume_density)
        
        return volume_profile
    
    def calculate_price_approach(self, symbol: str, current_price: float, order_blocks: List[EnhancedOrderBlock], kline_data: List[Dict]) -> List[PriceApproach]:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–æ Order Blocks"""
        approaches = []
        
        if len(kline_data) < 5:
            return approaches
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ tick size
        recent_prices = [k['close'] for k in kline_data[-10:]]
        price_changes = [abs(recent_prices[i] - recent_prices[i-1]) for i in range(1, len(recent_prices))]
        avg_tick = np.mean(price_changes) if price_changes else 0.001
        
        for block in order_blocks:
            if not block.is_active:
                continue
            
            zone_low = block.low_price
            zone_high = block.high_price
            zone_mid = (zone_low + zone_high) / 2
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ –∑–æ–Ω–∏
            if current_price < zone_low:
                distance = zone_low - current_price
                target_zone = (zone_low, zone_high)
            elif current_price > zone_high:
                distance = current_price - zone_high
                target_zone = (zone_low, zone_high)
            else:
                # –¶—ñ–Ω–∞ –≤–∂–µ –≤ –∑–æ–Ω—ñ
                distance = 0
                target_zone = (zone_low, zone_high)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤ —Ç—ñ–∫–∞—Ö
            distance_ticks = int(distance / avg_tick) if avg_tick > 0 else 999
            
            # –ê–Ω–∞–ª—ñ–∑ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è
            approach_speed = self._analyze_approach_speed(kline_data[-5:], current_price, zone_mid)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ—Ä–æ–≥—ñ–¥–Ω–æ—Å—Ç—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–æ–Ω–∏
            probability = self._calculate_reach_probability(distance_ticks, approach_speed, block.strength)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è —è–∫—â–æ —Ü–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
            if distance_ticks <= 50:  # –í –º–µ–∂–∞—Ö 50 —Ç—ñ–∫—ñ–≤
                approach = PriceApproach(
                    symbol=symbol,
                    current_price=current_price,
                    target_zone=target_zone,
                    distance_ticks=distance_ticks,
                    approach_speed=approach_speed,
                    probability=probability
                )
                approaches.append(approach)
        
        return sorted(approaches, key=lambda x: x.distance_ticks)
    
    def _analyze_approach_speed(self, recent_candles: List[Dict], current_price: float, target_price: float) -> str:
        """–ê–Ω–∞–ª—ñ–∑ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è"""
        if len(recent_candles) < 3:
            return 'unknown'
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ momentum –≤ –Ω–∞–ø—Ä—è–º–∫—É —Ü—ñ–ª—ñ
        closes = [c['close'] for c in recent_candles]
        direction_to_target = 1 if target_price > current_price else -1
        
        movements = []
        for i in range(1, len(closes)):
            move = (closes[i] - closes[i-1]) * direction_to_target
            movements.append(move)
        
        avg_movement = np.mean(movements) if movements else 0
        movement_consistency = len([m for m in movements if m > 0]) / len(movements) if movements else 0
        
        if avg_movement > 0 and movement_consistency > 0.7:
            if avg_movement > 0.002 * current_price:  # –ë—ñ–ª—å—à–µ 0.2% –∑–∞ —Å–≤—ñ—á–∫—É
                return 'fast'
            else:
                return 'medium'
        else:
            return 'slow'
    
    def _calculate_reach_probability(self, distance_ticks: int, approach_speed: str, block_strength: float) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ—Ä–æ–≥—ñ–¥–Ω–æ—Å—Ç—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–æ–Ω–∏"""
        base_probability = 50  # –ë–∞–∑–æ–≤–∞ –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å
        
        # –ö–æ—Ä–µ–∫—Ü—ñ—è –∑–∞ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
        if distance_ticks <= 5:
            distance_bonus = 40
        elif distance_ticks <= 10:
            distance_bonus = 30
        elif distance_ticks <= 20:
            distance_bonus = 20
        else:
            distance_bonus = max(0, 20 - (distance_ticks - 20))
        
        # –ö–æ—Ä–µ–∫—Ü—ñ—è –∑–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—é
        speed_bonus = {'fast': 25, 'medium': 15, 'slow': 5, 'unknown': 0}[approach_speed]
        
        # –ö–æ—Ä–µ–∫—Ü—ñ—è –∑–∞ —Å–∏–ª—É –±–ª–æ–∫—É
        strength_bonus = (block_strength / 100) * 15
        
        total_probability = base_probability + distance_bonus + speed_bonus + strength_bonus
        return min(95, max(5, total_probability))

# ================================
# ENHANCED ALERT ENGINE
# ================================
class EnhancedAlertEngine:
    def __init__(self, bot: Bot, db, analyzer: EnhancedTechnicalAnalyzer):
        self.bot = bot
        self.db = db
        self.analyzer = analyzer
        self.symbol_fetcher = analyzer.symbol_fetcher
        self.is_running = False
        self.active_order_blocks: Dict[str, List[EnhancedOrderBlock]] = {}
        self.approach_history: Dict[str, Set[str]] = defaultdict(set)  # –î–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        self.scan_count = 0
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        self.is_running = True
        logger.info("üöÄ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Volumized Order Blocks –∑–∞–ø—É—â–µ–Ω–æ")
        
        while self.is_running:
            try:
                await self.enhanced_scan_cycle()
                self.scan_count += 1
                
                # –ö–æ–∂–Ω—ñ 10 —Ü–∏–∫–ª—ñ–≤ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
                if self.scan_count % 10 == 0:
                    await self.symbol_fetcher.get_top_symbols(TOP_SYMBOLS_COUNT)
                
                await asyncio.sleep(CHECK_INTERVAL)
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(60)
    
    async def enhanced_scan_cycle(self):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ü–∏–∫–ª —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —Å–∏–º–≤–æ–ª–∏
        top_symbols = await self.symbol_fetcher.get_top_symbols(TOP_SYMBOLS_COUNT)
        
        if not top_symbols:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤")
            return
        
        logger.info(f"üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è {len(top_symbols)} —Å–∏–º–≤–æ–ª—ñ–≤...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∞–ª–µ—Ä—Ç–∏
        async with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT DISTINCT user_id FROM user_alerts WHERE is_active = 1
            """)
            active_users = [row[0] for row in cursor.fetchall()]
        
        if not active_users:
            logger.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç—ñ–≤")
            return
        
        # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤
        scan_tasks = []
        for symbol in top_symbols[:50]:  # –ü–µ—Ä—à—ñ 50 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            for timeframe in TIMEFRAMES:
                task = self.scan_symbol_for_blocks(symbol, timeframe, active_users)
                scan_tasks.append(task)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–∞—Ç—á–∞–º–∏
        batch_size = 10
        for i in range(0, len(scan_tasks), batch_size):
            batch = scan_tasks[i:i+batch_size]
            await asyncio.gather(*batch, return_exceptions=True)
            await asyncio.sleep(0.1)  # –ú–∞–ª–µ–Ω—å–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏
    
    async def scan_symbol_for_blocks(self, symbol: str, timeframe: str, active_users: List[int]):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –Ω–∞ Order Blocks"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
            kline_data = await self.analyzer.get_kline_data(symbol, timeframe, 500)
            if not kline_data or len(kline_data) < 50:
                return
            
            current_price = kline_data[-1]['close']
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Order Blocks
            order_blocks = self.analyzer.identify_volumized_order_blocks(kline_data, symbol, timeframe)
            
            if not order_blocks:
                return
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –±–ª–æ–∫–∏
            key = f"{symbol}_{timeframe}"
            self.active_order_blocks[key] = order_blocks
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –±–ª–æ–∫—ñ–≤
            approaches = self.analyzer.calculate_price_approach(symbol, current_price, order_blocks, kline_data)
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–ª–µ—Ä—Ç–∏ –¥–ª—è –Ω–∞–±–ª–∏–∂–µ–Ω—å
            for approach in approaches:
                await self.process_approach_alert(approach, order_blocks, active_users)
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–æ–Ω–∏
            for block in order_blocks:
                if self.is_price_in_zone(current_price, block):
                    await self.send_zone_entry_alert(block, current_price, active_users, kline_data)
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è {symbol}_{timeframe}: {e}")
    
    def is_price_in_zone(self, current_price: float, order_block: EnhancedOrderBlock) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü—ñ–Ω–∞ –≤ –∑–æ–Ω—ñ Order Block"""
        return order_block.low_price <= current_price <= order_block.high_price
    
    async def process_approach_alert(self, approach: PriceApproach, order_blocks: List[EnhancedOrderBlock], active_users: List[int]):
        """–û–±—Ä–æ–±–∫–∞ –∞–ª–µ—Ä—Ç—É –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è"""
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π Order Block
        target_block = None
        for block in order_blocks:
            if (block.low_price, block.high_price) == approach.target_zone:
                target_block = block
                break
        
        if not target_block:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –∞–ª–µ—Ä—Ç –¥–ª—è —Ü—ñ—î—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ
        alert_key = f"{approach.symbol}_{target_block.id}_{approach.distance_ticks}"
        
        if alert_key in self.approach_history[approach.symbol]:
            return
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–ª–µ—Ä—Ç —Ç—ñ–ª—å–∫–∏ –¥–ª—è –±–ª–∏–∑—å–∫–∏—Ö –Ω–∞–±–ª–∏–∂–µ–Ω—å
        if approach.distance_ticks <= APPROACH_TICKS and approach.probability > 60:
            for user_id in active_users:
                await self.send_approach_alert(user_id, approach, target_block)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            self.approach_history[approach.symbol].add(alert_key)
            
            # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100)
            if len(self.approach_history[approach.symbol]) > 100:
                old_items = list(self.approach_history[approach.symbol])[:50]
                for item in old_items:
                    self.approach_history[approach.symbol].remove(item)
    
    async def send_approach_alert(self, user_id: int, approach: PriceApproach, order_block: EnhancedOrderBlock):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—É –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è"""
        try:
            block_emoji = "üü¢" if order_block.block_type == "bullish" else "üî¥"
            speed_emoji = {"fast": "üöÄ", "medium": "‚ö°", "slow": "üêå", "unknown": "‚ùì"}[approach.approach_speed]
            
            strength_stars = "‚≠ê" * min(5, int(order_block.strength / 20))
            flux_bars = "‚ñà" * min(10, int(order_block.flux_score / 10))
            
            message = f"""
üéØ <b>–ù–ê–ë–õ–ò–ñ–ï–ù–ù–Ø –î–û –ó–û–ù–ò!</b> {block_emoji}

üìä <b>{approach.symbol.upper()}</b> | {order_block.timeframe.upper()}
üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: <b>${approach.current_price:,.4f}</b>

üéØ <b>Order Block Info:</b>
‚Ä¢ –¢–∏–ø: <b>{order_block.block_type.title()}</b> Order Block
‚Ä¢ –ó–æ–Ω–∞: <b>${approach.target_zone[0]:,.4f} - ${approach.target_zone[1]:,.4f}</b>
‚Ä¢ –í—ñ–¥—Å—Ç–∞–Ω—å: <b>{approach.distance_ticks} —Ç—ñ–∫—ñ–≤</b>

üìà <b>–ê–Ω–∞–ª—ñ–∑ —Å–∏–ª–∏:</b>
‚Ä¢ –°–∏–ª–∞ –±–ª–æ–∫—É: <b>{order_block.strength:.1f}/100</b> {strength_stars}
‚Ä¢ Flux Score: <b>{order_block.flux_score:.1f}/100</b> {flux_bars}
‚Ä¢ Institutional: <b>{order_block.institutional_level:.1f}%</b>

üöÄ <b>–î–∏–Ω–∞–º—ñ–∫–∞ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è:</b>
‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å: <b>{approach.approach_speed.title()}</b> {speed_emoji}
‚Ä¢ –í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: <b>{approach.probability:.1f}%</b>

üí° <b>Volumized Analysis:</b>
‚Ä¢ Volume: <b>{order_block.volume:,.0f}</b>
‚Ä¢ Quote Volume: <b>${order_block.quote_volume:,.0f}</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')} | –¶–∏–∫–ª #{self.scan_count}
            """
            
            await self.bot.send_message(user_id, message, parse_mode="HTML")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
            await self._save_alert_to_db(user_id, approach.symbol, message, approach.current_price)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è approach –∞–ª–µ—Ä—Ç—É: {e}")
    
    async def send_zone_entry_alert(self, order_block: EnhancedOrderBlock, current_price: float, active_users: List[int], kline_data: List[Dict]):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—É –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–æ–Ω—É"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ —Ü–µ–π –∞–ª–µ—Ä—Ç
            entry_key = f"{order_block.symbol}_{order_block.id}_entry"
            
            if entry_key in self.approach_history[order_block.symbol]:
                return
            
            block_emoji = "üü¢" if order_block.block_type == "bullish" else "üî¥"
            volume_analysis = self._analyze_current_volume(kline_data[-10:], order_block)
            
            message = f"""
üö® <b>–¶–Ü–ù–ê –í –ó–û–ù–Ü!</b> {block_emoji}

üìä <b>{order_block.symbol.upper()}</b> | {order_block.timeframe.upper()}
üí∞ –¶—ñ–Ω–∞ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è: <b>${current_price:,.4f}</b>

üéØ <b>Volumized Order Block:</b>
‚Ä¢ –¢–∏–ø: <b>{order_block.block_type.title()}</b>
‚Ä¢ –ó–æ–Ω–∞: <b>${order_block.low_price:,.4f} - ${order_block.high_price:,.4f}</b>
‚Ä¢ –ü–æ–∑–∏—Ü—ñ—è –≤ –∑–æ–Ω—ñ: <b>{self._calculate_zone_position(current_price, order_block):.1f}%</b>

üìä <b>–ú–µ—Ç—Ä–∏–∫–∏ –±–ª–æ–∫—É:</b>
‚Ä¢ –°–∏–ª–∞: <b>{order_block.strength:.1f}/100</b>
‚Ä¢ Flux: <b>{order_block.flux_score:.1f}/100</b>
‚Ä¢ Institutional: <b>{order_block.institutional_level:.1f}%</b>

üìà <b>–ü–æ—Ç–æ—á–Ω–∏–π –æ–±'—î–º:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>{volume_analysis['status']}</b>
‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –±–ª–æ–∫–æ–º: <b>{volume_analysis['comparison']}</b>

üé≤ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>
{self._generate_trading_recommendation(order_block, current_price, volume_analysis)}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
            """
            
            for user_id in active_users:
                await self.bot.send_message(user_id, message, parse_mode="HTML")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —â–æ –∞–ª–µ—Ä—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
            self.approach_history[order_block.symbol].add(entry_key)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è zone entry –∞–ª–µ—Ä—Ç—É: {e}")
    
    def _calculate_zone_position(self, current_price: float, order_block: EnhancedOrderBlock) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó —Ü—ñ–Ω–∏ –≤ –∑–æ–Ω—ñ (0-100%)"""
        zone_range = order_block.high_price - order_block.low_price
        if zone_range == 0:
            return 50
        
        position = (current_price - order_block.low_price) / zone_range * 100
        return max(0, min(100, position))
    
    def _analyze_current_volume(self, recent_klines: List[Dict], order_block: EnhancedOrderBlock) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±'—î–º—É"""
        if not recent_klines:
            return {"status": "–ù–µ–≤—ñ–¥–æ–º–æ", "comparison": "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏"}
        
        current_volume = recent_klines[-1]['volume']
        avg_recent_volume = np.mean([k['volume'] for k in recent_klines[-5:]])
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –æ–±'—î–º–æ–º –±–ª–æ–∫—É
        block_volume_ratio = current_volume / order_block.volume if order_block.volume > 0 else 0
        
        if current_volume > avg_recent_volume * 1.5:
            status = "üî• –í–∏—Å–æ–∫–∏–π –æ–±'—î–º"
        elif current_volume > avg_recent_volume:
            status = "üìà –ü—ñ–¥–≤–∏—â–µ–Ω–∏–π –æ–±'—î–º"
        else:
            status = "üìä –ó–≤–∏—á–∞–π–Ω–∏–π –æ–±'—î–º"
        
        if block_volume_ratio > 0.8:
            comparison = f"üéØ {block_volume_ratio:.1f}x –≤—ñ–¥ –±–ª–æ–∫—É (–°–∏–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)"
        elif block_volume_ratio > 0.5:
            comparison = f"üìä {block_volume_ratio:.1f}x –≤—ñ–¥ –±–ª–æ–∫—É (–ü–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)"
        else:
            comparison = f"üìâ {block_volume_ratio:.1f}x –≤—ñ–¥ –±–ª–æ–∫—É (–°–ª–∞–±–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)"
        
        return {
            "status": status,
            "comparison": comparison,
            "ratio": block_volume_ratio
        }
    
    def _generate_trading_recommendation(self, order_block: EnhancedOrderBlock, current_price: float, volume_analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
        recommendations = []
        
        # –ë–∞–∑–æ–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –∑–∞ —Ç–∏–ø–æ–º –±–ª–æ–∫—É
        if order_block.block_type == "bullish":
            recommendations.append("üü¢ –†–æ–∑–≥–ª—è–π LONG –ø–æ–∑–∏—Ü—ñ—é")
        else:
            recommendations.append("üî¥ –†–æ–∑–≥–ª—è–π SHORT –ø–æ–∑–∏—Ü—ñ—é")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ —Å–∏–ª–æ—é –±–ª–æ–∫—É
        if order_block.strength > 80:
            recommendations.append("üíé –î—É–∂–µ —Å–∏–ª—å–Ω–∞ –∑–æ–Ω–∞ - –≤–∏—Å–æ–∫–∞ –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–∫—Ü—ñ—ó")
        elif order_block.strength > 60:
            recommendations.append("‚≠ê –°–∏–ª—å–Ω–∞ –∑–æ–Ω–∞ - —Ö–æ—Ä–æ—à–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å")
        else:
            recommendations.append("‚ö†Ô∏è –ü–æ–º—ñ—Ä–Ω–∞ –∑–æ–Ω–∞ - –±—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–π")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ –æ–±'—î–º–æ–º
        if volume_analysis['ratio'] > 0.7:
            recommendations.append("üöÄ –û–±'—î–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ä—É—Ö")
        else:
            recommendations.append("üîç –ß–µ–∫–∞–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–±'—î–º–æ–º")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ institutional activity
        if order_block.institutional_level > 70:
            recommendations.append("üè¶ –í–∏—Å–æ–∫–∞ institutional –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
        
        return "\n".join([f"‚Ä¢ {rec}" for rec in recommendations])
    
    async def _save_alert_to_db(self, user_id: int, symbol: str, message: str, price: float):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
        try:
            async with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO alert_history (user_id, symbol, alert_message, price, timestamp)
                    VALUES (?, ?, ?, ?, ?)
                """, (user_id, symbol, message, price, int(datetime.now().timestamp())))
                conn.commit()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—É –≤ –ë–î: {e}")
    
    def stop_monitoring(self):
        """–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        self.is_running = False
        logger.info("üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")

# ================================
# ENHANCED BOT HANDLERS
# ================================
class EnhancedTradingBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.db = Database()
        self.analyzer = EnhancedTechnicalAnalyzer()
        self.alert_engine = EnhancedAlertEngine(self.bot, self.db, self.analyzer)
        self.router = Router()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        self.router.message(Command("start"))(self.start_handler)
        self.router.message(Command("help"))(self.help_handler)
        self.router.message(Command("add_alert"))(self.add_alert_handler)
        self.router.message(Command("analyze"))(self.analyze_handler)
        self.router.message(Command("top_symbols"))(self.top_symbols_handler)
        self.router.message(Command("status"))(self.status_handler)
        self.router.message(Command("my_alerts"))(self.my_alerts_handler)
        self.router.message(Command("stop_alerts"))(self.stop_alerts_handler)
        
        # FSM –æ–±—Ä–æ–±–Ω–∏–∫–∏
        self.router.message(OrderBlockStates.waiting_for_symbol)(self.process_symbol)
        self.router.message(OrderBlockStates.waiting_for_timeframe)(self.process_timeframe)
        self.router.message(OrderBlockStates.waiting_for_sensitivity)(self.process_sensitivity)
        
        self.dp.include_router(self.router)
    
    async def start_handler(self, message: Message):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ /start"""
        welcome_text = f"""
üöÄ <b>Enhanced Volumized Order Blocks Bot</b>

–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! 

üéØ <b>–ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¢–û–ü-100 –º–æ–Ω–µ—Ç Binance
‚Ä¢ Volumized Order Blocks –∑ institutional –∞–Ω–∞–ª—ñ–∑–æ–º
‚Ä¢ Flux Charts –∞–Ω–∞–ª—ñ–∑ –ø–æ—Ç–æ–∫—ñ–≤ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
‚Ä¢ –ê–ª–µ—Ä—Ç–∏ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è (–∑–∞ 5 —Ç—ñ–∫—ñ–≤ –¥–æ –∑–æ–Ω–∏)
‚Ä¢ –ê–ª–µ—Ä—Ç–∏ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–æ–Ω—É
‚Ä¢ –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Å–∏–ª–∏ –±–ª–æ–∫—ñ–≤

üìä <b>–¢–∞–π–º—Ñ—Ä–µ–π–º–∏:</b> 1h, 4h
üîÑ <b>–ß–∞—Å—Ç–æ—Ç–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:</b> –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
üéØ <b>–¢–æ—á–Ω—ñ—Å—Ç—å:</b> –¥–æ 5 —Ç—ñ–∫—ñ–≤ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è

üöÄ <b>–ö–æ–º–∞–Ω–¥–∏:</b>
/add_alert - –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–ª–µ—Ä—Ç–∏ (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç)
/analyze SYMBOL - –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏
/top_symbols - –ü–æ—Ç–æ—á–Ω–∏–π –¢–û–ü-100 —Å–∏–º–≤–æ–ª—ñ–≤
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>‚ö° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /add_alert —â–æ–± –ø–æ—á–∞—Ç–∏!</b>
        """
        await message.answer(welcome_text, parse_mode="HTML")
    
    async def help_handler(self, message: Message):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞"""
        help_text = """
<b>üìö –ü–æ–≤–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ Enhanced Bot</b>

<b>üéØ Volumized Order Blocks:</b>
‚Ä¢ –ó–æ–Ω–∏ –∑ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤–∏—Å–æ–∫–∏–º –æ–±'—î–º–æ–º
‚Ä¢ Institutional footprint –∞–Ω–∞–ª—ñ–∑
‚Ä¢ Buy/Sell pressure —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
‚Ä¢ Volume profile –≤ –∑–æ–Ω–∞—Ö

<b>üåä Flux Charts:</b>
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç–æ–∫—ñ–≤ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
‚Ä¢ Institutional vs Retail flow
‚Ä¢ Momentum –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –ø–æ—Ç–æ–∫—ñ–≤

<b>‚ö° –¢–∏–ø–∏ –∞–ª–µ—Ä—Ç—ñ–≤:</b>
‚Ä¢ üéØ Approach Alert - –∑–∞ 1-5 —Ç—ñ–∫—ñ–≤ –¥–æ –∑–æ–Ω–∏
‚Ä¢ üö® Zone Entry - –ø—Ä–∏ –≤—Ö–æ–¥–∂–µ–Ω–Ω—ñ –≤ –∑–æ–Ω—É
‚Ä¢ üåä Flux Alert - –ø—Ä–∏ —Å–∏–ª—å–Ω–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö

<b>üìä –ú–µ—Ç—Ä–∏–∫–∏ –±–ª–æ–∫—ñ–≤:</b>
‚Ä¢ Strength (0-100) - –∑–∞–≥–∞–ª—å–Ω–∞ —Å–∏–ª–∞
‚Ä¢ Flux Score (0-100) - –æ—Ü—ñ–Ω–∫–∞ –ø–æ—Ç–æ–∫—ñ–≤
‚Ä¢ Institutional Level (0-100) - –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–∞–Ω–∫—ñ–≤

<b>üéÆ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∞–Ω—É—î –¢–û–ü-100 –º–æ–Ω–µ—Ç Binance –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∞–ª–µ—Ä—Ç–∏ –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π 4h –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥—É
‚Ä¢ 1h –¥–ª—è —Ç–æ—á–Ω–∏—Ö —Ç–æ—á–æ–∫ –≤—Ö–æ–¥—É
‚Ä¢ –ó–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ Institutional Level > 70%
‚Ä¢ –ö–æ–º–±—ñ–Ω—É–π –∑ –≤–ª–∞—Å–Ω–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º
        """
        await message.answer(help_text, parse_mode="HTML")
    
    async def add_alert_handler(self, message: Message, state: FSMContext):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç"""
        user_id = message.from_user.id
        
        try:
            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç—ñ–≤
            async with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∞–ª–µ—Ä—Ç
                cursor.execute("""
                    SELECT COUNT(*) FROM user_alerts 
                    WHERE user_id = ? AND is_active = 1
                """, (user_id,))
                
                active_count = cursor.fetchone()[0]
                
                if active_count > 0:
                    await message.answer("""
üéØ <b>–ê–ª–µ—Ä—Ç–∏ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω—ñ!</b>

–¢–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∞–ª–µ—Ä—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –¢–û–ü-100 –º–æ–Ω–µ—Ç.

üìä <b>–©–æ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è:</b>
‚Ä¢ Volumized Order Blocks –Ω–∞ 1h —Ç–∞ 4h
‚Ä¢ –ù–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –∑–æ–Ω (1-5 —Ç—ñ–∫—ñ–≤)
‚Ä¢ –í—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–æ–Ω–∏
‚Ä¢ Flux –ø–æ—Ç–æ–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ

/status - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/stop_alerts - –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–ª–µ—Ä—Ç–∏
                    """, parse_mode="HTML")
                    return
                
                # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–ª–µ—Ä—Ç –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                cursor.execute("""
                    INSERT INTO user_alerts (user_id, symbol, timeframe, sensitivity, alert_type)
                    VALUES (?, ?, ?, ?, ?)
                """, (user_id, 'ALL_TOP100', 'ALL', 0.5, 'volumized_order_blocks'))
                
                conn.commit()
            
            success_message = f"""
‚úÖ <b>–ê–ª–µ—Ä—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</b>

üéØ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>
‚Ä¢ –°–∏–º–≤–æ–ª–∏: –¢–û–ü-100 Binance (–∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º–∏: 1h, 4h
‚Ä¢ –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å: 0.5 (—Å–µ—Ä–µ–¥–Ω—è)
‚Ä¢ –¢–∏–ø–∏: Order Blocks + Flux

üöÄ <b>–©–æ –±—É–¥–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏—Å—è:</b>
‚Ä¢ Volumized Order Blocks –∑ —Å–∏–ª–æ—é > 40%
‚Ä¢ –ù–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –∑–æ–Ω –∑–∞ 1-5 —Ç—ñ–∫—ñ–≤
‚Ä¢ –í—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–æ–Ω–∏ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –æ–±'—î–º—É
‚Ä¢ Institutional activity > 70%

‚è∞ <b>–ß–∞—Å—Ç–æ—Ç–∞:</b> –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> /status

<b>üéä –í—Å–µ –≥–æ—Ç–æ–≤–æ! –û—á—ñ–∫—É–π –∞–ª–µ—Ä—Ç–∏...</b>
            """
            
            await message.answer(success_message, parse_mode="HTML")
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ –∞–ª–µ—Ä—Ç–∏")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–ª–µ—Ä—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
    
    async def analyze_handler(self, message: Message):
        """–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–Ω–µ—Ç–∏"""
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ —Å–∏–º–≤–æ–ª –∑ –∫–æ–º–∞–Ω–¥–∏
            parts = message.text.split()
            if len(parts) < 2:
                await message.answer("""
üìä <b>–ê–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏</b>

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/analyze SYMBOL</code>

–ü—Ä–∏–∫–ª–∞–¥–∏:
‚Ä¢ <code>/analyze BTC</code>
‚Ä¢ <code>/analyze ETH</code>
‚Ä¢ <code>/analyze SOL</code>

üéØ –û—Ç—Ä–∏–º–∞—î—à –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Order Blocks —Ç–∞ Flux Charts
                """, parse_mode="HTML")
                return
            
            symbol = parts[1].upper()
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É
            loading_msg = await message.answer(f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {symbol}...")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –æ–±–æ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
            analysis_results = {}
            
            for timeframe in TIMEFRAMES:
                kline_data = await self.analyzer.get_kline_data(symbol, timeframe, 500)
                
                if kline_data:
                    order_blocks = self.analyzer.identify_volumized_order_blocks(kline_data, symbol, timeframe)
                    current_price = kline_data[-1]['close']
                    approaches = self.analyzer.calculate_price_approach(symbol, current_price, order_blocks, kline_data)
                    
                    analysis_results[timeframe] = {
                        'order_blocks': order_blocks[:5],  # –¢–æ–ø-5 –±–ª–æ–∫—ñ–≤
                        'current_price': current_price,
                        'approaches': approaches[:3],  # –¢–æ–ø-3 –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è
                        'volume_24h': sum([k['volume'] for k in kline_data[-24:]] if timeframe == '1h' else [k['volume'] for k in kline_data[-6:]])
                    }
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await loading_msg.delete()
            
            # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
            await self.send_detailed_analysis(message.chat.id, symbol, analysis_results)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–∑–≤—É —Å–∏–º–≤–æ–ª—É.")
    
    async def send_detailed_analysis(self, chat_id: int, symbol: str, results: Dict):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
        try:
            for timeframe, data in results.items():
                if not data['order_blocks']:
                    continue
                
                report = f"""
üìä <b>–î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó: {symbol}</b>
‚è∞ <b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {timeframe.upper()}
üí∞ <b>–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞:</b> ${data['current_price']:,.4f}
üìà <b>–û–±'—î–º ({timeframe}):</b> {data['volume_24h']:,.0f}

üéØ <b>–¢–û–ü ORDER BLOCKS:</b>
"""
                
                for i, block in enumerate(data['order_blocks'], 1):
                    block_emoji = "üü¢" if block.block_type == "bullish" else "üî¥"
                    strength_stars = "‚≠ê" * min(5, int(block.strength / 20))
                    
                    distance = min(
                        abs(data['current_price'] - block.low_price),
                        abs(data['current_price'] - block.high_price)
                    )
                    distance_pct = (distance / data['current_price']) * 100
                    
                    report += f"""
<b>{i}. {block_emoji} {block.block_type.title()} Block</b>
‚Ä¢ –ó–æ–Ω–∞: ${block.low_price:,.4f} - ${block.high_price:,.4f}
‚Ä¢ –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_pct:.2f}%
‚Ä¢ –°–∏–ª–∞: {block.strength:.1f}/100 {strength_stars}
‚Ä¢ Flux: {block.flux_score:.1f}/100
‚Ä¢ Institutional: {block.institutional_level:.1f}%
‚Ä¢ Volume: {block.volume:,.0f}
"""
                
                # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è
                if data['approaches']:
                    report += f"\nüéØ <b>–ê–ö–¢–ò–í–ù–Ü –ù–ê–ë–õ–ò–ñ–ï–ù–ù–Ø:</b>\n"
                    for approach in data['approaches']:
                        speed_emoji = {"fast": "üöÄ", "medium": "‚ö°", "slow": "üêå"}[approach.approach_speed]
                        report += f"""
‚Ä¢ –ó–æ–Ω–∞: ${approach.target_zone[0]:.4f}-${approach.target_zone[1]:.4f}
‚Ä¢ –í—ñ–¥—Å—Ç–∞–Ω—å: {approach.distance_ticks} —Ç—ñ–∫—ñ–≤ {speed_emoji}
‚Ä¢ –í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: {approach.probability:.1f}%
"""
                
                report += f"\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                await self.bot.send_message(chat_id, report, parse_mode="HTML")
                await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É: {e}")
    
    async def top_symbols_handler(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¢–û–ü —Å–∏–º–≤–æ–ª—ñ–≤"""
        try:
            loading_msg = await message.answer("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¢–û–ü-100 —Å–∏–º–≤–æ–ª—ñ–≤...")
            
            symbols = await self.analyzer.symbol_fetcher.get_top_symbols(50)  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-50
            
            await loading_msg.delete()
            
            if symbols:
                # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                top_10 = symbols[:10]
                top_20 = symbols[10:20]
                top_50 = symbols[20:50]
                
                report = f"""
üìä <b>–¢–û–ü-100 –°–ò–ú–í–û–õ–Ü–í BINANCE</b>
<i>–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –æ–±'—î–º–æ–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–∞ 24h</i>

ü•á <b>–¢–û–ü-10:</b>
{' ‚Ä¢ '.join(top_10)}

ü•à <b>11-20 –º—ñ—Å—Ü–µ:</b>
{' ‚Ä¢ '.join(top_20)}

ü•â <b>21-50 –º—ñ—Å—Ü–µ:</b>
{' ‚Ä¢ '.join(top_50)}

‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
üîÑ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É

<i>üí° –í—Å—ñ —Ü—ñ —Å–∏–º–≤–æ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å—Å—è –±–æ—Ç–æ–º</i>
                """
                
                await message.answer(report, parse_mode="HTML")
            else:
                await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Å–∏–º–≤–æ–ª—ñ–≤: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
    
    async def status_handler(self, message: Message):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        try:
            user_id = message.from_user.id
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            async with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ê–∫—Ç–∏–≤–Ω—ñ –∞–ª–µ—Ä—Ç–∏
                cursor.execute("""
                    SELECT COUNT(*) FROM user_alerts 
                    WHERE user_id = ? AND is_active = 1
                """, (user_id,))
                active_alerts = cursor.fetchone()[0]
                
                # –Ü—Å—Ç–æ—Ä—ñ—è –∞–ª–µ—Ä—Ç—ñ–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
                today_start = int(datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp())
                cursor.execute("""
                    SELECT COUNT(*) FROM alert_history 
                    WHERE user_id = ? AND timestamp >= ?
                """, (user_id, today_start))
                today_alerts = cursor.fetchone()[0]
                
                # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª–µ—Ä—Ç—ñ–≤
                cursor.execute("""
                    SELECT COUNT(*) FROM alert_history 
                    WHERE user_id = ?
                """, (user_id,))
                total_alerts = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
            top_symbols_count = len(await self.analyzer.symbol_fetcher.get_top_symbols(100))
            active_blocks_count = sum(len(blocks) for blocks in self.alert_engine.active_order_blocks.values())
            
            is_monitoring = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.alert_engine.is_running else "üî¥ –ó—É–ø–∏–Ω–µ–Ω–∏–π"
            
            status_report = f"""
üìä <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–ò</b>

üë§ <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ –∞–ª–µ—Ä—Ç–∏: <b>{active_alerts}</b>
‚Ä¢ –ê–ª–µ—Ä—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ: <b>{today_alerts}</b>
‚Ä¢ –í—Å—å–æ–≥–æ –∞–ª–µ—Ä—Ç—ñ–≤: <b>{total_alerts}</b>

ü§ñ <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: <b>{is_monitoring}</b>
‚Ä¢ –¶–∏–∫–ª —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: <b>#{self.alert_engine.scan_count}</b>

üìà <b>–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:</b>
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª–µ—Ä—Ç—ñ–≤: <b>{total_alerts}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å: <b>{active_alerts}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å: <b>{today_alerts}</b>
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∞–ª–µ—Ä—Ç—É: <b>{1 / CHECK_INTERVAL} —Ç—ñ–∫—ñ–≤</b>

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π 4h –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥—É
‚Ä¢ 1h –¥–ª—è —Ç–æ—á–Ω–∏—Ö —Ç–æ—á–æ–∫ –≤—Ö–æ–¥—É
‚Ä¢ –ö–æ–º–±—ñ–Ω—É–π –∑ –≤–ª–∞—Å–Ω–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º
‚Ä¢ –ó–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ Institutional Level > 70%        
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Flux Score –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä—É—Ö—É
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–π Volume Profile –≤ –∑–æ–Ω–∞—Ö

‚è∞ {datetime.now().strftime('%H:%M:%S')}
            """
            
            await message.answer(status_report, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç—É—Å—É: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É")
    
    async def my_alerts_handler(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∞–ª–µ—Ä—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user_id = message.from_user.id
            
            async with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ê–∫—Ç–∏–≤–Ω—ñ –∞–ª–µ—Ä—Ç–∏
                cursor.execute("""
                    SELECT symbol, timeframe, sensitivity, alert_type, created_at
                    FROM user_alerts 
                    WHERE user_id = ? AND is_active = 1
                """, (user_id,))
                active_alerts = cursor.fetchall()
                
                # –û—Å—Ç–∞–Ω–Ω—ñ –∞–ª–µ—Ä—Ç–∏
                cursor.execute("""
                    SELECT symbol, alert_message, price, timestamp
                    FROM alert_history 
                    WHERE user_id = ? 
                    ORDER BY timestamp DESC 
                    LIMIT 10
                """, (user_id,))
                recent_alerts = cursor.fetchall()
            
            if not active_alerts:
                await message.answer("""
üìä <b>–¢–í–û–á –ê–õ–ï–†–¢–ò</b>

‚ùå <b>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–ª–µ—Ä—Ç—ñ–≤</b>

–©–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–ª–µ—Ä—Ç–∏:
‚Ä¢ <code>/add_alert</code> - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–ª–µ—Ä—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç
‚Ä¢ <code>/analyze SYMBOL</code> - –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–Ω–µ—Ç–∏

üéØ <b>–©–æ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è:</b>
‚Ä¢ Volumized Order Blocks
‚Ä¢ –ù–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –∑–æ–Ω
‚Ä¢ –í—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–æ–Ω–∏
‚Ä¢ Flux –ø–æ—Ç–æ–∫–∏
                """, parse_mode="HTML")
                return
            
            # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –∞–ª–µ—Ä—Ç–∏
            report = f"""
üìä <b>–¢–í–û–á –ê–ö–¢–ò–í–ù–Ü –ê–õ–ï–†–¢–ò</b>

üéØ <b>–ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:</b>
"""
            
            for alert in active_alerts:
                symbol, timeframe, sensitivity, alert_type, created_at = alert
                created_date = datetime.fromtimestamp(created_at).strftime('%d.%m.%Y %H:%M')
                
                report += f"""
‚Ä¢ <b>{symbol}</b> | {timeframe.upper()}
  –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å: {sensitivity} | –¢–∏–ø: {alert_type}
  –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_date}
"""
            
            # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∞–ª–µ—Ä—Ç–∏
            if recent_alerts:
                report += f"\nüìà <b>–û–°–¢–ê–ù–ù–Ü –ê–õ–ï–†–¢–ò:</b>\n"
                
                for alert in recent_alerts[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 5
                    symbol, message, price, timestamp = alert
                    alert_date = datetime.fromtimestamp(timestamp).strftime('%d.%m %H:%M')
                    
                    # –°–∫–æ—Ä–æ—á—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    short_message = message[:100] + "..." if len(message) > 100 else message
                    
                    report += f"""
‚Ä¢ <b>{symbol}</b> | ${price:,.4f}
  {short_message}
  {alert_date}
"""
            
            report += f"""
\nüí° <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è:</b>
/stop_alerts - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∞–ª–µ—Ä—Ç–∏
/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ —Å—Ç–∞—Ç—É—Å
            """
            
            await message.answer(report, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ my_alerts: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤")
    
    async def stop_alerts_handler(self, message: Message):
        """–ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –∞–ª–µ—Ä—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user_id = message.from_user.id
            
            async with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤—Å—ñ –∞–ª–µ—Ä—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cursor.execute("""
                    UPDATE user_alerts 
                    SET is_active = 0 
                    WHERE user_id = ?
                """, (user_id,))
                
                affected_rows = cursor.rowcount
                conn.commit()
            
            if affected_rows > 0:
                await message.answer(f"""
üõë <b>–ê–õ–ï–†–¢–ò –ó–£–ü–ò–ù–ï–ù–û!</b>

‚úÖ –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {affected_rows} –∞–ª–µ—Ä—Ç—ñ–≤

üìä <b>–©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î:</b>
‚Ä¢ –¢–∏ –±—ñ–ª—å—à–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∞–ª–µ—Ä—Ç–∏
‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è –¥–ª—è —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢ –ú–æ–∂–µ—à –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /add_alert

üí° <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏:</b>
‚Ä¢ <code>/analyze SYMBOL</code> - —Ä—É—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
‚Ä¢ <code>/top_symbols</code> - –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–ø –º–æ–Ω–µ—Ç
‚Ä¢ <code>/status</code> - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏

<b>–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞! üöÄ</b>
                """, parse_mode="HTML")
                
                logger.info(f"üõë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑—É–ø–∏–Ω–∏–≤ –∞–ª–µ—Ä—Ç–∏")
            else:
                await message.answer("""
‚ÑπÔ∏è <b>–ù–ï–ú–ê–Ñ –ê–ö–¢–ò–í–ù–ò–• –ê–õ–ï–†–¢–Ü–í</b>

–¢–∏ –≤–∂–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∞–ª–µ—Ä—Ç–∏.

–©–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–ª–µ—Ä—Ç–∏:
‚Ä¢ <code>/add_alert</code> - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–ª–µ—Ä—Ç–∏
                """, parse_mode="HTML")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –∞–ª–µ—Ä—Ç—ñ–≤: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –∞–ª–µ—Ä—Ç—ñ–≤")
    
    async def process_symbol(self, message: Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–º–≤–æ–ª—É –≤ FSM"""
        symbol = message.text.upper()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—É
        if not symbol.isalnum() or len(symbol) > 10:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Å–∏–º–≤–æ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏ (–º–∞–∫—Å. 10 —Å–∏–º–≤–æ–ª—ñ–≤)")
            return
        
        await state.update_data(symbol=symbol)
        await state.set_state(OrderBlockStates.waiting_for_timeframe)
        
        await message.answer(f"""
‚úÖ <b>–°–∏–º–≤–æ–ª –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {symbol}</b>

–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:

‚è∞ <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏:</b>
‚Ä¢ <code>1h</code> - –≥–æ–¥–∏–Ω–Ω–∏–π (–¥–ª—è —Ç–æ—á–Ω–∏—Ö —Ç–æ—á–æ–∫ –≤—Ö–æ–¥—É)
‚Ä¢ <code>4h</code> - 4-–≥–æ–¥–∏–Ω–Ω–∏–π (–¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥—É)
‚Ä¢ <code>1d</code> - –¥–µ–Ω–Ω–∏–π (–¥–ª—è –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö –∑–æ–Ω)

–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤:
        """, parse_mode="HTML")
    
    async def process_timeframe(self, message: Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –≤ FSM"""
        timeframe = message.text.lower()
        
        valid_timeframes = ['1h', '4h', '1d']
        if timeframe not in valid_timeframes:
            await message.answer(f"""
‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º!</b>

–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏:
‚Ä¢ <code>1h</code> - –≥–æ–¥–∏–Ω–Ω–∏–π
‚Ä¢ <code>4h</code> - 4-–≥–æ–¥–∏–Ω–Ω–∏–π  
‚Ä¢ <code>1d</code> - –¥–µ–Ω–Ω–∏–π

–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∑ —Ü–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤:
            """, parse_mode="HTML")
            return
        
        await state.update_data(timeframe=timeframe)
        await state.set_state(OrderBlockStates.waiting_for_sensitivity)
        
        await message.answer(f"""
‚úÖ <b>–¢–∞–π–º—Ñ—Ä–µ–π–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timeframe.upper()}</b>

–¢–µ–ø–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–∏ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å (0.1 - 1.0):

üéØ <b>–†—ñ–≤–Ω—ñ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ:</b>
‚Ä¢ <code>0.1</code> - –¥—É–∂–µ –Ω–∏–∑—å–∫–∞ (—Ç—ñ–ª—å–∫–∏ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ –±–ª–æ–∫–∏)
‚Ä¢ <code>0.3</code> - –Ω–∏–∑—å–∫–∞ (—Å–∏–ª—å–Ω—ñ –±–ª–æ–∫–∏)
‚Ä¢ <code>0.5</code> - —Å–µ—Ä–µ–¥–Ω—è (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞)
‚Ä¢ <code>0.7</code> - –≤–∏—Å–æ–∫–∞ (–±–∞–≥–∞—Ç–æ —Å–∏–≥–Ω–∞–ª—ñ–≤)
‚Ä¢ <code>1.0</code> - –¥—É–∂–µ –≤–∏—Å–æ–∫–∞ (–≤—Å—ñ –±–ª–æ–∫–∏)

–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 0.1 –¥–æ 1.0:
        """, parse_mode="HTML")
    
    async def process_sensitivity(self, message: Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ –≤ FSM"""
        try:
            sensitivity = float(message.text)
            
            if not (0.1 <= sensitivity <= 1.0):
                await message.answer("""
‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å!</b>

–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0.1 –¥–æ 1.0

–ü—Ä–∏–∫–ª–∞–¥–∏:
‚Ä¢ <code>0.5</code> - —Å–µ—Ä–µ–¥–Ω—è —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å
‚Ä¢ <code>0.3</code> - –Ω–∏–∑—å–∫–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å
‚Ä¢ <code>0.7</code> - –≤–∏—Å–æ–∫–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å

–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 0.1 –¥–æ 1.0:
                """, parse_mode="HTML")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ FSM
            data = await state.get_data()
            symbol = data.get('symbol')
            timeframe = data.get('timeframe')
            
            # –î–æ–¥–∞—î–º–æ –∞–ª–µ—Ä—Ç –≤ –±–∞–∑—É
            user_id = message.from_user.id
            
            async with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∞–ª–µ—Ä—Ç
                cursor.execute("""
                    INSERT INTO user_alerts (user_id, symbol, timeframe, sensitivity, alert_type)
                    VALUES (?, ?, ?, ?, ?)
                """, (user_id, symbol, timeframe, sensitivity, 'volumized_order_blocks'))
                
                conn.commit()
            
            # –û—á–∏—â–∞—î–º–æ FSM
            await state.clear()
            
            await message.answer(f"""
‚úÖ <b>–ê–õ–ï–†–¢ –î–û–î–ê–ù–û!</b>

üìä <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>
‚Ä¢ –°–∏–º–≤–æ–ª: <b>{symbol}</b>
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: <b>{timeframe.upper()}</b>
‚Ä¢ –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å: <b>{sensitivity}</b>
‚Ä¢ –¢–∏–ø: Volumized Order Blocks

üéØ <b>–©–æ –±—É–¥–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏—Å—è:</b>
‚Ä¢ Order Blocks –∑ —Å–∏–ª–æ—é > {int(sensitivity * 40)}%
‚Ä¢ Flux Score > {int(sensitivity * 30)}%
‚Ä¢ –ù–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –∑–æ–Ω
‚Ä¢ –í—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–æ–Ω–∏

üöÄ <b>–ö–æ–º–∞–Ω–¥–∏:</b>
/my_alerts - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∞–ª–µ—Ä—Ç–∏
/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ —Å—Ç–∞—Ç—É—Å
/stop_alerts - –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–ª–µ—Ä—Ç–∏

<b>üéä –ê–ª–µ—Ä—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –û—á—ñ–∫—É–π —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...</b>
            """, parse_mode="HTML")
            
            logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –∞–ª–µ—Ä—Ç: {user_id} -> {symbol}_{timeframe}")
            
        except ValueError:
            await message.answer("""
‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!</b>

–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 0.1 –¥–æ 1.0

–ü—Ä–∏–∫–ª–∞–¥–∏:
‚Ä¢ <code>0.5</code>
‚Ä¢ <code>0.3</code>
‚Ä¢ <code>0.7</code>
            """, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—É: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
            await state.clear()

# ================================
# DATABASE CLASS
# ================================
class Database:
    def __init__(self, db_path: str = "data/data.db"):
        self.db_path = db_path
        self._init_database()
    
    def _init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at INTEGER,
                    is_active BOOLEAN DEFAULT 1
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü—è –∞–ª–µ—Ä—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_alerts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    symbol TEXT,
                    timeframe TEXT,
                    sensitivity REAL,
                    alert_type TEXT,
                    is_active BOOLEAN DEFAULT 1,
                    created_at INTEGER,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü—è —ñ—Å—Ç–æ—Ä—ñ—ó –∞–ª–µ—Ä—Ç—ñ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS alert_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    symbol TEXT,
                    alert_message TEXT,
                    price REAL,
                    timestamp INTEGER,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü—è Order Blocks
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS order_blocks (
                    id TEXT PRIMARY KEY,
                    symbol TEXT,
                    timeframe TEXT,
                    high_price REAL,
                    low_price REAL,
                    volume REAL,
                    quote_volume REAL,
                    timestamp INTEGER,
                    block_type TEXT,
                    strength REAL,
                    flux_score REAL,
                    institutional_level REAL,
                    is_active BOOLEAN DEFAULT 1,
                    created_at INTEGER
                )
            """)
            
            conn.commit()
            conn.close()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
    
    def get_connection(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
        return sqlite3.connect(self.db_path)

# ================================
# STATES
# ================================
class OrderBlockStates(StatesGroup):
    waiting_for_symbol = State()
    waiting_for_timeframe = State()
    waiting_for_sensitivity = State()

# ================================
# MAIN EXECUTION
# ================================
async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Volumized Order Blocks Bot...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
        bot = EnhancedTradingBot()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω—ñ
        monitoring_task = asyncio.create_task(bot.alert_engine.start_monitoring())
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await bot.dp.start_polling(bot.bot)
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        if 'bot' in locals():
            bot.alert_engine.stop_monitoring()
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—ó
        if 'bot' in locals():
            await bot.analyzer.close_session()
        
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main())