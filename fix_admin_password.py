import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash

def change_admin_password():

    db_path = "data/data.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT id, username, password_hash FROM admin_credentials")
        admins = cursor.fetchall()
        
        if not admins:
            return False
        

        for admin_id, username, password_hash in admins:
            print(f"   ID: {admin_id}, Username: {username}")
            print(f"   –ü–æ—Ç–æ—á–Ω–∏–π —Ö–µ—à: {password_hash[:20]}...")
        
        admin_id = input("\nüîë –í–≤–µ–¥—ñ—Ç—å ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ").strip()
        
        if not admin_id.isdigit():
            print("‚ùå ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
            return False
        
        admin_id = int(admin_id)
        
        cursor.execute("SELECT username FROM admin_credentials WHERE id = ?", (admin_id,))
        admin = cursor.fetchone()
        
        if not admin:
            print(f"‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑ ID {admin_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return False
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin[0]}")
        
        new_password = input("üîê –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å: ").strip()
        
        if not new_password:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
            return False
        
        new_password_hash = generate_password_hash(new_password, method='pbkdf2:sha256')
        
        print(f"üîê –ù–æ–≤–∏–π —Ö–µ—à: {new_password_hash[:20]}...")
        
        cursor.execute("UPDATE admin_credentials SET password_hash = ? WHERE id = ?", (new_password_hash, admin_id))
        conn.commit()
        
        print(f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin[0]} (ID: {admin_id}) —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!")
        
        cursor.execute("SELECT password_hash FROM admin_credentials WHERE id = ?", (admin_id,))
        stored_hash = cursor.fetchone()[0]
        
        if check_password_hash(stored_hash, new_password):
            print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def test_password():
    
    db_path = "data/data.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT id, username, password_hash FROM admin_credentials")
        admins = cursor.fetchall()
        
        if not admins:
            print("‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            return False
        
        print("üë• –ü–æ—Ç–æ—á–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:")
        for admin_id, username, password_hash in admins:
            print(f"   ID: {admin_id}, Username: {username}")
            print(f"   –•–µ—à: {password_hash}")
        
        test_password = input("\nüîê –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ").strip()
        
        if not test_password:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
            return False
        
        for admin_id, username, password_hash in admins:
            if check_password_hash(password_hash, test_password):
                print(f"‚úÖ –ü–∞—Ä–æ–ª—å –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username} (ID: {admin_id})")
                return True
            else:
                print(f"‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username} (ID: {admin_id})")
        
        print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∂–æ–¥–Ω–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def main():
                    
    print("üîê –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞—Ä–æ–ª—è–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
    print("=" * 70)
    
    while True:
        print("\nüìã –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
        print("1. üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("2. üß™ –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å")
        print("3. üö™ –í–∏–π—Ç–∏")
        
        choice = input("\nüëâ –í–∞—à –≤–∏–±—ñ—Ä (1-3): ").strip()
        
        if choice == "1":
            change_admin_password()
        elif choice == "2":
            test_password()
        elif choice == "3":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

if __name__ == "__main__":
    main()
